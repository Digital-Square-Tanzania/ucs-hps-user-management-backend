generator client {
  provider = "prisma-client-js"
  seed     = "(function)"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  avatar           String?
  status           UserStatus         @default(ACTIVE)
  createdAt        DateTime           @default(now()) @map("created_at")
  deletedAt        DateTime?          @map("deleted_at")
  firstName        String             @map("first_name")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  joinDate         DateTime           @default(now()) @map("join_date")
  lastName         String             @map("last_name")
  middleName       String?            @map("middle_name")
  phoneNumber      String?            @unique @map("phone_number")
  roleId           Int                @map("role_id")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  lastLogin        DateTime?          @map("last_login")
  BlacklistedToken BlacklistedToken[]
  UserToken        UserToken?
  role             Role               @relation(fields: [roleId], references: [id])

  @@index([email])
  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        RoleType @unique
  description String
  users       User[]

  @@map("roles")
}

model UserToken {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")
  resetToken  String?  @map("reset_token")
  userId      String   @unique @map("user_id")
  verifyToken String?  @map("verify_token")
  user        User     @relation(fields: [userId], references: [id])

  @@index([resetToken])
  @@index([verifyToken])
  @@map("user_tokens")
}

model BlacklistedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("blacklisted_tokens")
}

model RequestLog {
  id        String   @id @default(uuid())
  ip        String
  path      String
  method    String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("request_logs")
}

enum RoleType {
  UCS_DEVELOPER
  MOH_ADMIN
  COUNCIL_COORDINATOR
  FACILITY_PROVIDER
  VILLAGE_CHW
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Location {
  location_id     Int       @id @default(autoincrement())
  name            String
  description     String?
  address1        String?
  address2        String?
  city_village    String?
  state_province  String?
  postal_code     String?
  country         String?
  latitude        String?
  longitude       String?
  creator         Int
  date_created    DateTime
  county_district String?
  address3        String?
  address4        String?
  address5        String?
  address6        String?
  retired         Boolean   @default(false)
  retired_by      Int?
  date_retired    DateTime?
  retire_reason   String?
  parent_location Int?
  uuid            String    @unique
  changed_by      Int?
  date_changed    DateTime?
  address7        String?
  address8        String?
  address9        String?
  address10       String?
  address11       String?
  address12       String?
  address13       String?
  address14       String?
  address15       String?

  // ✅ Corrected Relation to LocationTagMap
  locationTagMaps LocationTagMap[]

  @@map("openmrs_location")
}

model LocationTag {
  location_tag_id Int       @id @default(autoincrement())
  name            String
  description     String?
  creator         Int
  date_created    DateTime
  retired         Boolean   @default(false)
  retired_by      Int?
  date_retired    DateTime?
  retire_reason   String?
  uuid            String    @unique
  changed_by      Int?
  date_changed    DateTime?

  // ✅ Corrected Relation to LocationTagMap
  locationTagMaps LocationTagMap[]

  @@map("openmrs_location_tag")
}

model LocationTagMap {
  location_id     Int
  location_tag_id Int

  // ✅ Corrected Relations
  location    Location    @relation(fields: [location_id], references: [location_id])
  locationTag LocationTag @relation(fields: [location_tag_id], references: [location_tag_id])

  @@id([location_id, location_tag_id])
  @@map("openmrs_location_tag_map")
}

model LocationHierarchyView {
  index    Int     @id @map("index")
  uuid     String  @map("uuid")
  country  String? @map("country")
  zone     String? @map("zone")
  region   String? @map("region")
  district String? @map("district")
  council  String? @map("council")
  ward     String? @map("ward")
  name     String  @map("name")
  type     String  @map("type")

  @@map("location_hierarchy_view") // Maps to the materialized view
}

model TeamRole {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique
  identifier String   @unique
  display    String
  name       String
  members    Int      @default(0)
  creator    Json
  createdAt  DateTime @default(now())

  @@map("openmrs_team_roles")
}

model Team {
  id   Int    @id @default(autoincrement())
  uuid String @unique
  name String

  @@map("openmrs_teams")
}

model UserRole {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  name        String
  display     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("openmrs_user_roles")
}

model TeamMember {
  id                  String   @id @default(uuid())
  identifier          String   @unique
  firstName           String
  middleName          String?
  lastName            String
  username            String   @unique
  personUuid          String   @unique
  userUuid            String?  @unique
  openMrsUuid         String   @unique
  teamUuid            String?
  teamName            String?
  teamIdentifier      String?
  locationUuid        String?
  locationName        String?
  locationDescription String?
  openmrsObject       Json // Store full OpenMRS JSON response
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("team_members")
}
